import Foundation
import Combine

@MainActor
final class PatientService: ObservableObject {
    static let shared = PatientService()
    
    @Published var patients: [Patient] = []
    @Published var activePatient: Patient?
    @Published var shiftMetrics: ShiftMetrics
    @Published var notifications: [ClinicalAlert] = []
    @Published var revenueOpportunities: [RevenueOpportunity] = []
    
    private let providerId = "dr_sarah_chen"
    
    private init() {
        self.shiftMetrics = ShiftMetrics(
            startTime: Calendar.current.date(byAdding: .hour, value: -6, to: Date()) ?? Date(),
            providerId: providerId,
            patientsSeenCount: 0,
            totalRVUs: 0.0,
            averageLevel: 0.0,
            hourlyRate: 0.0,
            completedDischarges: 0,
            qualityMetrics: QualityMetrics(
                sepsisBundle: 100.0,
                doorToDoc: 12.0,
                patientSatisfaction: 96.0,
                documentationRate: 98.0,
                returnRate: 0.0
            ),
            missedOpportunities: []
        )
        
        loadSampleData()
        startShiftTimer()
    }
    
    // MARK: - Patient Management
    
    func addPatient(_ patient: Patient) {
        patients.append(patient)
        shiftMetrics.patientsSeenCount += 1
        updateShiftMetrics()
    }
    
    func updatePatient(_ patient: Patient) {
        if let index = patients.firstIndex(where: { $0.id == patient.id }) {
            patients[index] = patient
        }
    }
    
    func setActivePatient(_ patient: Patient) {
        activePatient = patient
    }
    
    func dischargePatient(_ patientId: String) {
        if let index = patients.firstIndex(where: { $0.id == patientId }) {
            patients[index].status = .discharged
            shiftMetrics.completedDischarges += 1
            updateShiftMetrics()
        }
    }
    
    // MARK: - Clinical Intelligence
    
    func analyzePatientChart(_ patient: Patient) -> ChartLevel {
        // Simulate chart analysis
        let completionPercentage = Int.random(in: 75...95)
        let currentLevel = Int.random(in: 3...4)
        let potentialLevel = min(5, currentLevel + (completionPercentage < 85 ? 1 : 0))
        
        let missingElements = completionPercentage < 85 ? ["Social History"] : []
        
        return ChartLevel(
            current: currentLevel,
            potential: potentialLevel,
            completionPercentage: completionPercentage,
            missingElements: missingElements,
            rvuCurrent: Double(currentLevel) * 1.5,
            rvuPotential: Double(potentialLevel) * 1.5
        )
    }
    
    func detectProcedureInTranscription(_ transcription: String) -> [DetectedProcedure] {
        var procedures: [DetectedProcedure] = []
        
        // Simple procedure detection patterns
        let procedurePatterns = [
            ("sutur", "Complex Laceration Repair", "13132", 4.66, 150.0),
            ("stitch", "Simple Laceration Repair", "12001", 2.11, 68.0),
            ("drain", "Incision and Drainage", "10060", 2.58, 83.0),
            ("splint", "Splint Application", "29125", 1.27, 41.0),
            ("inject", "Joint Injection", "20610", 1.94, 62.0)
        ]
        
        let lowercased = transcription.lowercased()
        
        for (pattern, name, cpt, rvu, revenue) in procedurePatterns {
            if lowercased.contains(pattern) {
                let procedure = DetectedProcedure(
                    id: UUID().uuidString,
                    transcript: transcription,
                    procedureName: name,
                    cptCode: cpt,
                    rvuValue: rvu,
                    estimatedRevenue: revenue,
                    confidence: 0.85,
                    timestamp: Date(),
                    autoGeneratedNote: generateProcedureNote(name, cpt)
                )
                procedures.append(procedure)
            }
        }
        
        return procedures
    }
    
    private func generateProcedureNote(_ procedureName: String, _ cptCode: String) -> String {
        return """
        PROCEDURE: \(procedureName)
        CPT: \(cptCode)
        
        INDICATION: [Auto-detected from transcription]
        CONSENT: Verbal consent obtained after discussion of risks and benefits
        TECHNIQUE: Standard sterile technique employed
        
        PROCEDURE DETAILS:
        [To be completed by provider]
        
        COMPLICATIONS: None
        DISPOSITION: Tolerated well
        """
    }
    
    // MARK: - Revenue Optimization
    
    func generateRevenueOpportunities(for patient: Patient) -> [RevenueOpportunity] {
        var opportunities: [RevenueOpportunity] = []
        
        if patient.chartLevel.missingElements.contains("Social History") {
            opportunities.append(RevenueOpportunity(
                id: UUID().uuidString,
                patientId: patient.id,
                type: .socialHistory,
                description: "Add social history to upgrade to Level \(patient.chartLevel.potential)",
                quickFix: "\"Never smoker, social alcohol use, retired\"",
                estimatedTime: 15,
                rvuIncrease: 1.5,
                revenueIncrease: 52.0,
                priority: .high
            ))
        }
        
        // Add other opportunity types
        if patient.chartLevel.completionPercentage < 90 {
            opportunities.append(RevenueOpportunity(
                id: UUID().uuidString,
                patientId: patient.id,
                type: .reviewOfSystems,
                description: "Complete ROS documentation",
                quickFix: "\"Endocrine: No polyuria. Heme: No easy bruising.\"",
                estimatedTime: 10,
                rvuIncrease: 0.5,
                revenueIncrease: 18.0,
                priority: .medium
            ))
        }
        
        return opportunities
    }
    
    // MARK: - Notifications & Alerts
    
    func generateClinicalAlerts() {
        // Simulate smart notifications
        let alertTypes: [(ClinicalAlert.AlertType, String, ClinicalAlert.AlertSeverity)] = [
            (.sepsis, "Room 8 meets sepsis criteria - Begin bundle?", .high),
            (.criticalValue, "Critical troponin result - Room 5", .critical),
            (.procedureOpportunity, "Undocumented procedure detected - Room 3", .medium),
            (.revenueOpportunity, "Chart optimization available - Room 12", .low)
        ]
        
        for (type, message, severity) in alertTypes where Bool.random() {
            let alert = ClinicalAlert(
                id: UUID().uuidString,
                type: type,
                message: message,
                severity: severity,
                timestamp: Date(),
                patientId: patients.randomElement()?.id ?? "",
                actionable: true,
                autoActions: ["Start Protocol", "Generate Note", "Set Timer"]
            )
            notifications.append(alert)
        }
        
        // Keep only recent notifications
        notifications = Array(notifications.suffix(10))
    }
    
    // MARK: - Shift Management
    
    private func updateShiftMetrics() {
        let totalRVUs = patients.reduce(0.0) { $0 + $1.rvuValue }
        let avgLevel = patients.isEmpty ? 0.0 : patients.reduce(0.0) { $0 + Double($1.chartLevel.current) } / Double(patients.count)
        let hourlyRate = shiftMetrics.rvuPerHour * 32.74 // 2024 conversion factor
        
        shiftMetrics.totalRVUs = totalRVUs
        shiftMetrics.averageLevel = avgLevel
        shiftMetrics.hourlyRate = hourlyRate
    }
    
    private func startShiftTimer() {
        Timer.scheduledTimer(withTimeInterval: 60.0, repeats: true) { [weak self] _ in
            Task { @MainActor in
                self?.generateClinicalAlerts()
                self?.updateShiftMetrics()
            }
        }
    }
    
    // MARK: - Sample Data
    
    private func loadSampleData() {
        let samplePatients = [
            Patient(
                id: "patient_1",
                firstName: "John",
                lastName: "Smith",
                age: 67,
                gender: "M",
                room: "5",
                chiefComplaint: "Chest Pain x 3hr",
                arrivalTime: Calendar.current.date(byAdding: .hour, value: -3, to: Date()) ?? Date(),
                status: .awaitingResults,
                assignedProvider: providerId,
                acuity: 3,
                chartLevel: ChartLevel(
                    current: 4,
                    potential: 5,
                    completionPercentage: 85,
                    missingElements: ["Social History"],
                    rvuCurrent: 6.0,
                    rvuPotential: 7.5
                ),
                rvuValue: 6.0,
                criticalAlerts: [],
                pendingResults: [
                    PendingResult(
                        id: "troponin_2",
                        test: "Troponin #2",
                        orderedTime: Date(),
                        expectedTime: Calendar.current.date(byAdding: .minute, value: 18, to: Date()) ?? Date(),
                        priority: .stat
                    )
                ]
            ),
            Patient(
                id: "patient_2",
                firstName: "Mary",
                lastName: "Johnson",
                age: 34,
                gender: "F",
                room: "8",
                chiefComplaint: "Abdominal Pain",
                arrivalTime: Calendar.current.date(byAdding: .hour, value: -2, to: Date()) ?? Date(),
                status: .consulting,
                assignedProvider: providerId,
                acuity: 2,
                chartLevel: ChartLevel(
                    current: 5,
                    potential: 5,
                    completionPercentage: 100,
                    missingElements: [],
                    rvuCurrent: 7.5,
                    rvuPotential: 7.5
                ),
                rvuValue: 7.5,
                criticalAlerts: [
                    ClinicalAlert(
                        id: "sepsis_alert",
                        type: .sepsis,
                        message: "Meets sepsis criteria",
                        severity: .high,
                        timestamp: Date(),
                        patientId: "patient_2",
                        actionable: true,
                        autoActions: ["Start Bundle"]
                    )
                ],
                pendingResults: []
            ),
            Patient(
                id: "patient_3",
                firstName: "Emma",
                lastName: "Davis",
                age: 28,
                gender: "F",
                room: "3",
                chiefComplaint: "Laceration",
                arrivalTime: Calendar.current.date(byAdding: .hour, value: -1, to: Date()) ?? Date(),
                status: .dischargeReady,
                assignedProvider: providerId,
                acuity: 4,
                chartLevel: ChartLevel(
                    current: 3,
                    potential: 3,
                    completionPercentage: 90,
                    missingElements: [],
                    rvuCurrent: 4.5,
                    rvuPotential: 4.5
                ),
                rvuValue: 4.5,
                criticalAlerts: [],
                pendingResults: []
            )
        ]
        
        patients = samplePatients
        activePatient = samplePatients.first
        shiftMetrics.patientsSeenCount = samplePatients.count
        updateShiftMetrics()
    }
}
import SwiftUI
import AVFoundation

struct SettingsView: View {
    @EnvironmentObject var appState: CoreAppState
    @AppStorage("selectedWhisperModel") private var selectedWhisperModel = "openai_whisper-base"
    @AppStorage("defaultNoteType") private var defaultNoteType = "soap"
    @AppStorage("autoSaveEnabled") private var autoSaveEnabled = true
    @AppStorage("speakerIdentificationEnabled") private var speakerIdentificationEnabled = false
    @AppStorage("medicalVocabularyEnhanced") private var medicalVocabularyEnhanced = true
    @AppStorage("redFlagDetectionEnabled") private var redFlagDetectionEnabled = true
    @AppStorage("continuousListeningEnabled") private var continuousListeningEnabled = false
    @AppStorage("hapticFeedbackEnabled") private var hapticFeedbackEnabled = true
    
    @State private var showingAbout = false
    @State private var showingPrivacy = false
    @State private var showingExportOptions = false
    @State private var showingModelDownload = false
    
    var body: some View {
        NavigationView {
            Form {
                // AI Model Settings
                Section {
                    VStack(alignment: .leading, spacing: 8) {
                        Label("Transcription Model", systemImage: "waveform")
                            .font(.headline)
                        
                        Picker("Model", selection: $selectedWhisperModel) {
                            Text("Fast (1B)").tag("openai_whisper-tiny")
                            Text("Balanced (3B)").tag("openai_whisper-base")
                            Text("Quality (8B)").tag("openai_whisper-small")
                            Text("Professional").tag("openai_whisper-medium")
                        }
                        .pickerStyle(SegmentedPickerStyle())
                        
                        Text(modelDescription)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    .padding(.vertical, 4)
                    
                    Toggle("Enhanced Medical Vocabulary", isOn: $medicalVocabularyEnhanced)
                    Toggle("Speaker Identification", isOn: $speakerIdentificationEnabled)
                } header: {
                    Text("AI Configuration")
                } footer: {
                    Text("Models run entirely on-device using Apple's Neural Engine")
                }
                
                // Note Generation Settings
                Section {
                    Picker("Default Note Type", selection: $defaultNoteType) {
                        ForEach(["soap", "edNote", "progress", "consult"], id: \.self) { type in
                            Text(noteTypeDisplayName(type)).tag(type)
                        }
                    }
                    
                    Toggle("Auto-Save Sessions", isOn: $autoSaveEnabled)
                    Toggle("Red Flag Detection", isOn: $redFlagDetectionEnabled)
                } header: {
                    Text("Documentation")
                }
                
                // Recording Settings
                Section {
                    Toggle("Continuous Listening", isOn: $continuousListeningEnabled)
                    Toggle("Haptic Feedback", isOn: $hapticFeedbackEnabled)
                    
                    HStack {
                        Label("Audio Input", systemImage: "mic")
                        Spacer()
                        Text(currentAudioInput)
                            .foregroundColor(.secondary)
                    }
                    
                    Button("Test Audio Levels") {
                        testAudioLevels()
                    }
                } header: {
                    Text("Recording")
                }
                
                // Privacy & Security
                Section {
                    HStack {
                        Label("Privacy", systemImage: "lock.shield")
                        Spacer()
                        Image(systemName: "checkmark.circle.fill")
                            .foregroundColor(.green)
                        Text("HIPAA Compliant")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    
                    Button("Privacy Policy") {
                        showingPrivacy = true
                    }
                    
                    Button("Export Data") {
                        showingExportOptions = true
                    }
                    
                    Button("Clear All Data") {
                        clearAllData()
                    }
                    .foregroundColor(.red)
                } header: {
                    Text("Privacy & Data")
                } footer: {
                    Text("All processing happens on-device. No data is sent to external servers.")
                }
                
                // Watch Integration
                Section {
                    HStack {
                        Label("Apple Watch", systemImage: "applewatch")
                        Spacer()
                        if appState.connectionStatus == .connected {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.green)
                            Text("Connected")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        } else {
                            Text("Not Connected")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    }
                    
                    Toggle("Watch Voice Commands", isOn: .constant(true))
                        .disabled(appState.connectionStatus != .connected)
                    
                    Button("Sync with Watch") {
                        syncWithWatch()
                    }
                    .disabled(appState.connectionStatus != .connected)
                } header: {
                    Text("Companion Devices")
                }
                
                // About
                Section {
                    HStack {
                        Text("Version")
                        Spacer()
                        Text(appVersion)
                            .foregroundColor(.secondary)
                    }
                    
                    Button("About NotedCore") {
                        showingAbout = true
                    }
                    
                    Link("Support", destination: URL(string: "https://notedcore.app/support")!)
                    
                    Link("Rate on App Store", destination: URL(string: "https://apps.apple.com/app/notedcore")!)
                } header: {
                    Text("About")
                }
            }
            .navigationTitle("Settings")
            .sheet(isPresented: $showingAbout) {
                AboutView()
            }
            .sheet(isPresented: $showingPrivacy) {
                PrivacyPolicyView()
            }
            .sheet(isPresented: $showingExportOptions) {
                ExportOptionsView()
            }
            .onChange(of: selectedWhisperModel) { _ in
                updateWhisperModel()
            }
        }
    }
    
    // MARK: - Computed Properties
    
    private var modelDescription: String {
        switch selectedWhisperModel {
        case "openai_whisper-tiny":
            return "Fastest processing, basic accuracy. Good for quick notes."
        case "openai_whisper-base":
            return "Balanced speed and accuracy. Recommended for most uses."
        case "openai_whisper-small":
            return "Higher accuracy, slower processing. Best for complex medical terms."
        case "openai_whisper-medium":
            return "Professional grade. Maximum accuracy for critical documentation."
        default:
            return ""
        }
    }
    
    private var currentAudioInput: String {
        let session = AVAudioSession.sharedInstance()
        return session.currentRoute.inputs.first?.portName ?? "Default"
    }
    
    private var appVersion: String {
        let version = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "1.0"
        let build = Bundle.main.infoDictionary?["CFBundleVersion"] as? String ?? "1"
        return "\(version) (\(build))"
    }
    
    // MARK: - Helper Methods
    
    private func noteTypeDisplayName(_ type: String) -> String {
        switch type {
        case "soap": return "SOAP Note"
        case "edNote": return "ED Note"
        case "progress": return "Progress Note"
        case "consult": return "Consultation"
        default: return type
        }
    }
    
    private func updateWhisperModel() {
        appState.selectedWhisperModel = selectedWhisperModel
        appState.whisperService.loadModel(selectedWhisperModel)
    }
    
    private func testAudioLevels() {
        // Trigger audio level test
        AudioCaptureService.shared.startLevelMonitoring { level in
            print("Audio level: \(level)")
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
            AudioCaptureService.shared.stopLevelMonitoring()
        }
    }
    
    private func clearAllData() {
        // Show confirmation alert
        // Clear all user defaults and saved data
        UserDefaults.standard.removePersistentDomain(forName: Bundle.main.bundleIdentifier!)
        appState.sessionManager.sessionHistory.removeAll()
    }
    
    private func syncWithWatch() {
        // Trigger watch sync
        WatchConnectivityManager.shared.syncData()
    }
}

// MARK: - About View
struct AboutView: View {
    @Environment(\.dismiss) var dismiss
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 30) {
                    // App Icon and Name
                    Image("AppIcon")
                        .resizable()
                        .frame(width: 120, height: 120)
                        .cornerRadius(24)
                    
                    Text("NotedCore")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                    
                    Text("Professional Medical Documentation")
                        .font(.headline)
                        .foregroundColor(.secondary)
                    
                    // Features
                    VStack(alignment: .leading, spacing: 16) {
                        FeatureRow(icon: "brain", title: "On-Device AI", description: "All processing happens locally using Apple Intelligence")
                        FeatureRow(icon: "lock.shield", title: "HIPAA Compliant", description: "Your data never leaves your device")
                        FeatureRow(icon: "waveform", title: "Real-time Transcription", description: "Powered by WhisperKit and Speech framework")
                        FeatureRow(icon: "doc.text", title: "Smart Notes", description: "Automatically formatted medical documentation")
                        FeatureRow(icon: "applewatch", title: "Watch Integration", description: "Control recordings from your wrist")
                    }
                    .padding()
                    .background(Color(.secondarySystemBackground))
                    .cornerRadius(12)
                    
                    // Credits
                    VStack(spacing: 8) {
                        Text("Built with ❤️ using")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        HStack(spacing: 20) {
                            Text("SwiftUI")
                            Text("•")
                            Text("Core ML")
                            Text("•")
                            Text("WhisperKit")
                        }
                        .font(.caption)
                        .foregroundColor(.secondary)
                    }
                    
                    Spacer(minLength: 50)
                }
                .padding()
            }
            .navigationTitle("About")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") { dismiss() }
                }
            }
        }
    }
}

struct FeatureRow: View {
    let icon: String
    let title: String
    let description: String
    
    var body: some View {
        HStack(alignment: .top, spacing: 12) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(.blue)
                .frame(width: 30)
            
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(.headline)
                Text(description)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
        }
    }
}

// MARK: - Privacy Policy View
struct PrivacyPolicyView: View {
    @Environment(\.dismiss) var dismiss
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    Text("Privacy Policy")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                    
                    Text("Last updated: \(Date(), formatter: DateFormatter.mediumDate)")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    PrivacySection(
                        title: "Data Collection",
                        content: "NotedCore processes all data locally on your device. We do not collect, store, or transmit any personal health information to external servers."
                    )
                    
                    PrivacySection(
                        title: "On-Device Processing",
                        content: "All speech recognition, transcription, and note generation happens entirely on your device using Apple's Neural Engine and Core ML frameworks."
                    )
                    
                    PrivacySection(
                        title: "Data Storage",
                        content: "Your recordings, transcripts, and notes are stored locally in your device's secure storage. Data is encrypted at rest using iOS's built-in encryption."
                    )
                    
                    PrivacySection(
                        title: "HIPAA Compliance",
                        content: "NotedCore is designed to support HIPAA compliance through on-device processing, encryption, and no external data transmission."
                    )
                    
                    PrivacySection(
                        title: "Third-Party Services",
                        content: "NotedCore does not use any third-party analytics, tracking, or cloud services. All functionality is self-contained."
                    )
                }
                .padding()
            }
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") { dismiss() }
                }
            }
        }
    }
}

struct PrivacySection: View {
    let title: String
    let content: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(title)
                .font(.headline)
            Text(content)
                .font(.body)
                .foregroundColor(.secondary)
        }
    }
}

// MARK: - Export Options View
struct ExportOptionsView: View {
    @Environment(\.dismiss) var dismiss
    @StateObject private var exportManager = ExportManager()
    
    var body: some View {
        NavigationView {
            List {
                Section {
                    ExportOption(
                        title: "Export All Sessions",
                        icon: "square.and.arrow.up",
                        action: exportManager.exportAllSessions
                    )
                    
                    ExportOption(
                        title: "Export Notes Only",
                        icon: "doc.text",
                        action: exportManager.exportNotesOnly
                    )
                    
                    ExportOption(
                        title: "Export to PDF",
                        icon: "doc.richtext",
                        action: exportManager.exportToPDF
                    )
                } header: {
                    Text("Export Options")
                } footer: {
                    Text("Exported data will be saved to Files app")
                }
                
                Section {
                    ExportOption(
                        title: "Backup to iCloud",
                        icon: "icloud.and.arrow.up",
                        action: exportManager.backupToiCloud
                    )
                    
                    ExportOption(
                        title: "Create Archive",
                        icon: "archivebox",
                        action: exportManager.createArchive
                    )
                } header: {
                    Text("Backup")
                }
            }
            .navigationTitle("Export Data")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") { dismiss() }
                }
            }
        }
    }
}

struct ExportOption: View {
    let title: String
    let icon: String
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack {
                Image(systemName: icon)
                    .foregroundColor(.blue)
                Text(title)
                    .foregroundColor(.primary)
            }
        }
    }
}

// MARK: - Export Manager
class ExportManager: ObservableObject {
    func exportAllSessions() {
        // Export implementation
    }
    
    func exportNotesOnly() {
        // Export notes implementation
    }
    
    func exportToPDF() {
        // PDF export implementation
    }
    
    func backupToiCloud() {
        // iCloud backup implementation
    }
    
    func createArchive() {
        // Archive creation implementation
    }
}

// MARK: - Date Formatter Extension
extension DateFormatter {
    static var mediumDate: DateFormatter {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        return formatter
    }
}